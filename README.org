* Styx: a nix-based multi-repo Haskell project manager

"Styx: there is no looking back."

Styx is a convenient wrapper around ~cabal2nix~, ~nix-shell~ and
~cabal sandbox~.

** How to use

*** Configuration

In your cabal project, create a ~styx.yaml~ file like so:


#+BEGIN_EXAMPLE

# List first the packages that you edit locally and want compiled "all the time", by cabal:
local-packages:
  my-main-package: # package name
    location: .    # location on your disk
  my-local-dep:    # package name
    location: dep  # location on your disk

# Optional: list patched or cutting edge packages that you depend on.
# These will be compiled only once, by nix.
source-deps:
  mtl:
    location: https://github.com/mrawesome/awsome-patched-version-of-mtl.git

# If you want you can add other haskell nix packages to depend on.
# Normally this is not necessary, because nix will track the dependencies on its own.
# Thus this section is mostly useful for throw-away projects which do not have a cabal file.
nix-deps:
    - criterion
    - gasp
    - lens
    - statistics

# In case you depend on other non-haskell tools or libs.
non-haskell-deps:
    - z3
#+END_EXAMPLE

Then, the command

#+BEGIN_SRC shell
styx configure
#+END_SRC

will create one nix file for each external package, a suitable
~shell.nix~, and a sandbox with sources for every local-package.

*** Use

#+BEGIN_SRC shell
styx build
#+END_SRC

Will run ~cabal install~ in the sandbox, in the nix shell.

~styx repl~ will also work. You can access the nix-shell and the
sandbox manually too:

#+BEGIN_SRC
nix-shell .styx/shell.nix --run "cabal ..."
#+END_SRC


